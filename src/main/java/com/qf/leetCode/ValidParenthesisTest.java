package com.qf.leetCode;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;

/**
 * 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。
 *
 * 有效字符串需满足：
 *
 * 左括号必须用相同类型的右括号闭合。
 * 左括号必须以正确的顺序闭合。
 * 注意空字符串可被认为是有效字符串。
 *
 * 示例 1:
 *
 * 输入: "()"
 * 输出: true
 * 示例 2:
 *
 * 输入: "()[]{}"
 * 输出: true
 * 示例 3:
 *
 * 输入: "(]"
 * 输出: false
 * 示例 4:
 *
 * 输入: "([)]"
 * 输出: false
 * 示例 5:
 *
 * 输入: "{[]}"
 * 输出: true
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/valid-parentheses
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */

public class ValidParenthesisTest {
    public static void main(String[] args) {
        String s = "()[]{}";
        String s1 = "([)]";
        System.out.println(isValid(s));
        System.out.println(isValid(s1));
    }
    private static boolean isValid(String s){
        if (s.length() % 2  == 1) return false;
        Map<Character, Character> map = new HashMap<>();
        map.put(')', '(');
        map.put(']', '[');
        map.put('}', '{');
        LinkedList<Character> linkedList = new LinkedList<>();
        char[] cs = s.toCharArray();
        for (char c : cs) {
            if (map.containsKey(c)){
                if (linkedList.isEmpty() || !linkedList.getFirst().equals(map.get(c))) return false;
                linkedList.pop();
            }else
                linkedList.push(c);
        }
        return linkedList.isEmpty();
    }
}
