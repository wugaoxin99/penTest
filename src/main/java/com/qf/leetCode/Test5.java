package com.qf.leetCode;

import java.util.HashSet;
import java.util.Set;

/**
 * 给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。
 *
 * 示例 1:
 *
 * 输入: "abcabcbb"
 * 输出: 3
 * 解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
 * 示例 2:
 *
 * 输入: "bbbbb"
 * 输出: 1
 * 解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
 * 示例 3:
 *
 * 输入: "pwwkew"
 * 输出: 3
 * 解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
 *      请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class Test5 {
    public static void main(String[] args) {
        String s = "pwwkew";
        String s2 = "bbbbb";
        String s3 = "abcabcbb";
        System.out.println(s+"-->"+lengthOfLongestSubstring(s));
        System.out.println(s2+"-->"+lengthOfLongestSubstring(s2));
        System.out.println(s3+"-->"+lengthOfLongestSubstring(s3));
        System.out.println("-->"+lengthOfLongestSubstring(""));
        System.out.println(" -->"+lengthOfLongestSubstring("    "));
        System.out.println("c-->"+lengthOfLongestSubstring("c"));
        System.out.println("au-->"+lengthOfLongestSubstring("au"));
    }
    private static int lengthOfLongestSubstring(String s) {
        Set<Character> set = new HashSet<>();
        int toRight = -1,maxLength = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i>0)
                set.remove(s.charAt(i-1));
            while (toRight+1<s.length()&&!set.contains(s.charAt(toRight+1))){
                set.add(s.charAt(toRight+1));
                toRight++;
            }
            maxLength = maxLength>(toRight-i+1)?maxLength:(toRight-i+1);
        }
        return maxLength;
    }
}
