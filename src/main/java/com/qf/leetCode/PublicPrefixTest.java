package com.qf.leetCode;

/**
 * 编写一个函数来查找字符串数组中的最长公共前缀。
 *
 * 如果不存在公共前缀，返回空字符串 ""。
 *
 * 示例 1:
 *
 * 输入: ["flower","flow","flight"]
 * 输出: "fl"
 * 示例 2:
 *
 * 输入: ["dog","racecar","car"]
 * 输出: ""
 * 解释: 输入不存在公共前缀。
 * 说明:
 *
 * 所有输入只包含小写字母 a-z 。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/longest-common-prefix
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class PublicPrefixTest {
    public static void main(String[] args) {
        String[] s = {"flower","flow","flight"};
        String[] s2 = {"dog","racecar","car"};
        String[] s3 = {"a"};
        String[] s4 = {"c", "c"};
        String[] s5 = {"aa", "a"};
        System.out.println(longestCommonPrefix(s));
        System.out.println(longestCommonPrefix(s2));
        System.out.println(longestCommonPrefix(s3));
        System.out.println(longestCommonPrefix(s4));
        System.out.println(longestCommonPrefix(s5));
    }
    private static String longestCommonPrefix(String[] strs){
        if (strs != null && strs.length>0) {
            StringBuilder sb1 = new StringBuilder();
            for (String str : strs) {
                sb1.append(str);
            }
            char[] cs = sb1.toString().toCharArray();
            for (char c : cs) {
                if ((c < 97) || (c > 122)) return "";
            }
            StringBuilder sb2 = new StringBuilder();
            sb2.append(strs[0]);
            char[] cs2 = sb2.toString().toCharArray();
            for (String str : strs) {
                char[] chars = str.toCharArray();
                int length = sb2.length();
                if (length > chars.length){   //相等的情况就没必要进来，减小内存消耗
                    length = chars.length;
                    sb2.delete(length, sb2.length());
                    cs2 = sb2.toString().toCharArray();
                }
                for (int i = 0; i < length; i++) {
                    if (chars[i] != cs2[i]){
                        sb2.delete(i, cs2.length);
                        cs2 = sb2.toString().toCharArray();
                        break;
                    }
                }
            }
            return sb2.toString();
        }
        return "";
    }
}
