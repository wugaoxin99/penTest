package com.qf.leetCodeTree;

/**
 * 递归实现二叉树遍历
 */

public class BinaryTreeImplement {
    private BinaryTreeNode root;//二叉树根结点
    public static void main(String[] args) {
        BinaryTreeImplement binaryTreeImplement=new BinaryTreeImplement();
        System.out.println("先序遍历输出结果：");//1 2 4 5 3 6
        BinaryTreeNode root = binaryTreeImplement.createBinaryTree();
        binaryTreeImplement.preOrder(root);
        System.out.println("\n中序遍历输出结果：");//4 2 5 1 6 3
        binaryTreeImplement.inOrder(root);
        System.out.println("\n后序遍历输出结果：");//4 5 2 6 3 1
        binaryTreeImplement.postOrder(root);
    }

    /**
     * 建立二叉树：
     *                  1
     *                /   \
     *               2      3
     *              / \    /
     *             4   5   6
     * @return
     */
    public BinaryTreeNode createBinaryTree(){
        root=new BinaryTreeNode(1);
        root.setLeftTreeNode(new BinaryTreeNode(2));
        root.setRightTreeNode(new BinaryTreeNode(3));
        root.getLeftTreeNode().setLeftTreeNode(new BinaryTreeNode(4));
        root.getLeftTreeNode().setRightTreeNode(new BinaryTreeNode(5));
        root.getRightTreeNode().setLeftTreeNode(new BinaryTreeNode(6));
        return root;
    }

    /**
     * 递归实现先序遍历：先访问根结点，然后左子树，最后右子树 (root->left->right)
     * @param root
     */
    public void preOrder(BinaryTreeNode root){
        if (root==null){
            return;
        }
        System.out.print(root.getData()+" ");//访问根结点
        preOrder(root.getLeftTreeNode());//先序遍历左子树
        preOrder(root.getRightTreeNode());//先序遍历右子树
    }
    /**
     * 中序遍历：先遍历左子树，然后根结点，最后右子树 (left->root->right)
     * @param root
     */
    public void inOrder(BinaryTreeNode root){
        if (root==null){
            return;
        }
        inOrder(root.getLeftTreeNode());//中序遍历左子树
        System.out.print(root.getData()+" ");//访问根结点
        inOrder(root.getRightTreeNode());//中序遍历右子树
    }

    /**
     * 递归实现后序遍历：先遍历左子树，然后右子树，最后根结点 (left->right->root)
     * @param root
     */
    public void postOrder(BinaryTreeNode root){
        if (root==null){
            return;
        }
        postOrder(root.getLeftTreeNode());//后序遍历左子树
        postOrder(root.getRightTreeNode());//后序遍历右子树
        System.out.print(root.getData()+" ");//访问根结点
    }
}
