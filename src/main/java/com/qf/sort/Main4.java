package com.qf.sort;

import java.util.Arrays;

/**
 * 划分算法--->快速排序
 */
public class Main4 {
    public static void main(String[] args) {
       int[] array={10,1,8,22,55,17,6,3};
       //以10位基准值，将比基准值小的数放左边，比基准值大的数放右边
       huafen(array,array[0],0,array.length-1);
       System.out.println(Arrays.toString(array));
       //排序
       quickSort(array,0,array.length-1);
       System.out.println(Arrays.toString(array));
    }

    /**
     * 划分算法
     * @param array
     */
    private static int huafen(int[] array,int baseValue,int start,int end) {
        int temp=baseValue;
        int i=start;
        int j=end;
        while (i<j){
            //从后面往前判断，如果大于等于temp就继续往前一位判断
            while (i<j && array[j]>=temp) j--;
            //如果小于temp就把j位置的数赋值给i位置
            array[i]=array[j];
            //此时从前面的数往后移动分别和temp比较，小于等于temp的数不改变位置，继续往后判断
            while (i<j && array[i]<=temp) i++;
            //遇到比temp的数就把当前i位置的数赋值给j位置
            array[j]=array[i];
        }
        //最后将temp的值赋给i或者j（此时i==j）的位置
        array[i]=temp;
        return i;
    }

    /**
     * 快速排序
     */
    private static void quickSort(int[] array,int start,int end){
        if (start>=end){
            return;
        }
        int baseValue=array[start];
        int middle=huafen(array,baseValue,start,end);
        /*可看做将数组拆分，middle位置的数位置左边全是小于或等于它的数，
        右边全是大于或等于它的数，所以位置已经不会再发生改变，可忽略*/
        //数组下标从start-->middle-1
        quickSort(array,start,middle-1);
        //数组下标从middle+1-->end
        quickSort(array,middle+1,end);
    }
}
