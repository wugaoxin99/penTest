package com.qf.sort;

import java.util.Arrays;

/**
 * 一段长度为x的钢条，价格为px(x为正整数)
 *         价格表如下：
 *         长度x   1   2   3   4   5    6    7    8    9    10
 *         价格px  1   5   8   9   10   17   17   20   24   30
 *
 * 现在给定一段长度为n（n不大于10）的钢条，求一个切割方案，使的钢条售出利益最大化
 * 动态规划算法
 * f(i)=j i米的钢条的利益最大化为j元
 * f(5)=max{f(4)+1,f(3)+5,f(2)+8,f(1)+9,f(0)+10}
 * f(i)=max{f(i-1)+p1,f(i-2)+p2,...,f(0)+pi}
 */
public class Main2 {
    public static void main(String[] args) {
        int x=10;
        int[] price={0, 1, 5, 8, 9, 10, 17, 17, 20, 24, 30};//下标为钢条长度，值为钢条整条卖的价格
        int[] maxPrice=new int[x+1];//下标0~10表示钢条长度，值表示利益最大化价格
        for (int i = 0; i < maxPrice.length; i++) {
            for (int j = 0; j < price.length; j++) {
                if (i>=j){
                    maxPrice[i]=Math.max(maxPrice[i-j]+price[j],maxPrice[i]);
                }
            }
        }
        System.out.println("0~10米的最佳价格：--->"+Arrays.toString(maxPrice));
    }
}
